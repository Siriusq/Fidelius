!function(root,factory){"function"==typeof define&&define.amd?define([],factory):"object"==typeof module&&module.exports?module.exports=factory():root.argon2=factory()}("undefined"!=typeof self?self:this,(function(){const global="undefined"!=typeof self?self:this,ArgonType={Argon2d:0,Argon2i:1,Argon2id:2};function loadModule(mem){if(loadModule._promise)return loadModule._promise;if(loadModule._module)return Promise.resolve(loadModule._module);let promise;return promise=global.process&&global.process.versions&&global.process.versions.node?loadWasmModule().then(Module=>new Promise(resolve=>{Module.postRun=()=>resolve(Module)})):loadWasmBinary().then(wasmBinary=>{const wasmMemory=mem?createWasmMemory(mem):void 0;return initWasm(wasmBinary,wasmMemory)}),loadModule._promise=promise,promise.then(Module=>(loadModule._module=Module,delete loadModule._promise,Module))}function initWasm(wasmBinary,wasmMemory){return new Promise(resolve=>(global.Module={wasmBinary:wasmBinary,wasmMemory:wasmMemory,postRun(){resolve(Module)}},loadWasmModule()))}function loadWasmModule(){return global.loadArgon2WasmModule?global.loadArgon2WasmModule():"function"==typeof require?Promise.resolve(require("../dist/argon2.js")):import("../dist/argon2.js")}function loadWasmBinary(){if(global.loadArgon2WasmBinary)return global.loadArgon2WasmBinary();if("function"==typeof require)return Promise.resolve(require("../dist/argon2.wasm")).then(wasmModule=>decodeWasmBinary(wasmModule));const wasmPath=global.argon2WasmPath||"/js/dist/argon2.wasm";return fetch(wasmPath).then(response=>response.arrayBuffer()).then(ab=>new Uint8Array(ab))}function decodeWasmBinary(base64){const text=atob(base64),binary=new Uint8Array(new ArrayBuffer(text.length));for(let i=0;i<text.length;i++)binary[i]=text.charCodeAt(i);return binary}function createWasmMemory(mem){const KB=1024,MB=1048576,GB=1024*MB,WASM_PAGE_SIZE=65536,totalMemory=32767,initialMemory=Math.min(Math.max(Math.ceil(mem*KB/65536),256)+256,32767);return new WebAssembly.Memory({initial:initialMemory,maximum:32767})}function allocateArray(Module,arr){return Module.allocate(arr,"i8",Module.ALLOC_NORMAL)}function allocateArrayStr(Module,arr){const nullTerminatedArray=new Uint8Array([...arr,0]);return allocateArray(Module,nullTerminatedArray)}function encodeUtf8(str){if("string"!=typeof str)return str;if("function"==typeof TextEncoder)return(new TextEncoder).encode(str);if("function"==typeof Buffer)return Buffer.from(str);throw new Error("Don't know how to encode UTF8")}function argon2Hash(params){const mCost=params.mem||65536;return loadModule(mCost).then(Module=>{const tCost=params.time||3,parallelism=params.parallelism||1,pwdEncoded=encodeUtf8(params.pass),pwd=allocateArrayStr(Module,pwdEncoded),pwdlen=pwdEncoded.length,saltEncoded=encodeUtf8(params.salt),salt=allocateArrayStr(Module,saltEncoded),saltlen=saltEncoded.length,argon2Type=params.type||ArgonType.Argon2d,hash=Module.allocate(new Array(params.hashLen||64),"i8",Module.ALLOC_NORMAL),secret=params.secret?allocateArray(Module,params.secret):0,secretlen=params.secret?params.secret.byteLength:0,ad=params.ad?allocateArray(Module,params.ad):0,adlen=params.ad?params.ad.byteLength:0,hashlen=params.hashLen||24,encodedlen=Module._argon2_encodedlen(tCost,mCost,parallelism,saltlen,hashlen,argon2Type),encoded=Module.allocate(new Array(encodedlen+1),"i8",Module.ALLOC_NORMAL),version=19;let err,res,result;try{res=Module._argon2_hash_ext(tCost,mCost,parallelism,pwd,pwdlen,salt,saltlen,hash,hashlen,encoded,encodedlen,argon2Type,secret,secretlen,ad,adlen,19)}catch(e){err=e}if(0!==res||err){try{err||(err=Module.UTF8ToString(Module._argon2_error_message(res)))}catch(e){}result={message:err,code:res}}else{let hashStr="";const hashArr=new Uint8Array(hashlen);for(let i=0;i<hashlen;i++){const byte=Module.HEAP8[hash+i];hashArr[i]=byte,hashStr+=("0"+(255&byte).toString(16)).slice(-2)}const encodedStr=Module.UTF8ToString(encoded);result={hash:hashArr,hashHex:hashStr,encoded:encodedStr}}try{Module._free(pwd),Module._free(salt),Module._free(hash),Module._free(encoded),ad&&Module._free(ad),secret&&Module._free(secret)}catch(e){}if(err)throw result;return result})}function argon2Verify(params){return loadModule().then(Module=>{const pwdEncoded=encodeUtf8(params.pass),pwd=allocateArrayStr(Module,pwdEncoded),pwdlen=pwdEncoded.length,secret=params.secret?allocateArray(Module,params.secret):0,secretlen=params.secret?params.secret.byteLength:0,ad=params.ad?allocateArray(Module,params.ad):0,adlen=params.ad?params.ad.byteLength:0,encEncoded=encodeUtf8(params.encoded),enc=allocateArrayStr(Module,encEncoded);let argon2Type=params.type,err,res,result;if(void 0===argon2Type){let typeStr=params.encoded.split("$")[1];typeStr&&(typeStr=typeStr.replace("a","A"),argon2Type=ArgonType[typeStr]||ArgonType.Argon2d)}try{res=Module._argon2_verify_ext(enc,pwd,pwdlen,secret,secretlen,ad,adlen,argon2Type)}catch(e){err=e}if(res||err){try{err||(err=Module.UTF8ToString(Module._argon2_error_message(res)))}catch(e){}result={message:err,code:res}}try{Module._free(pwd),Module._free(enc)}catch(e){}if(err)throw result;return result})}function unloadRuntime(){loadModule._module&&(loadModule._module.unloadRuntime(),delete loadModule._promise,delete loadModule._module)}return{ArgonType:ArgonType,hash:argon2Hash,verify:argon2Verify,unloadRuntime:unloadRuntime}}));